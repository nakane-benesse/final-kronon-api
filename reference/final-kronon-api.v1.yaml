openapi: 3.0.0
tags:
  - name: FinalAPI
    description: openapi varsion
info:
  title: final-kronon-API
  version: '1.0'
  description: API for android app
  contact:
    name: okuno_kronon
    email: okuno@gmail.com
servers:
  - url: 'http://localhost:3000'
paths:
  /login:
    post:
      tags: []
      summary: login
      operationId: post-login
      responses:
        '200':
          description: ログイン成功しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: ユーザーID情報を暗号化したもの
                  user:
                    $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    token: ユーザーの情報
                    user:
                      name: 杉杉
                      email: sugisugi@email.com
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: メールアドレス
                password:
                  type: string
                  format: password
                  description: パスワード
              required:
                - email
                - password
            examples:
              example-1:
                value:
                  email: sugisugi@gmail.com
                  password: Kronon1122
      security: []
      description: ログインボタンをタップした時に使用する
  /logout:
    delete:
      tags: []
      summary: logout
      operationId: delete-logout
      responses:
        '200':
          description: ログアウト成功しました
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      parameters: []
      description: ログアウトボタンをタップした時に使用する
  /users:
    parameters: []
    post:
      tags: []
      summary: createUser
      operationId: post-users
      responses:
        '201':
          description: アカウント登録に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 1
                    name: 杉
                    email: sugi@gmail.com
                    password: Kronon1122
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 杉杉
                  description: 名前
                email:
                  type: string
                  example: sugisugi@gmail.com
                  format: email
                  description: メールアドレス
                password:
                  type: string
                  format: password
                  example: Kronon1122
                  description: パスワード
              required:
                - name
                - email
                - password
            examples:
              example-1:
                value:
                  name: 杉杉
                  email: sugisugi@gmail.com
                  password: Kronon1122
      description: ユーザー登録
      security: []
  '/users/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ユーザーID
    get:
      summary: detailUser
      tags: []
      responses:
        '200':
          description: アカウント情報の表示に成功しました
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    name: 杉
                    email: sugi@email.com
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: 名前
                    example: 杉
                  email:
                    type: string
                    format: email
                    description: メールアドレス
                    example: sugi@gmail.com
                required:
                  - name
                  - email
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '404':
          description: ページが見つかりませんでした
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      operationId: get-users-id
      description: ログインユーザーの情報を表示する
  '/schedules/{id}':
    delete:
      tags: []
      summary: deleteSchedule
      operationId: delete-schedules-id
      responses:
        '200':
          description: 予定の削除に成功しました
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '403':
          description: 権限がありません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403ForbiddenError'
        '404':
          description: ページが見つかりませんでした
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404NotFoundError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      description: 予定を削除する。（delete_flagを0=>1)
    put:
      tags: []
      summary: updateSchedule
      operationId: put-schedules-id
      responses:
        '200':
          description: 予定修正成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '401':
          description: 認証エラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '403':
          description: |
            権限がありません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403ForbiddenError'
              examples: {}
        '404':
          description: ページが見つかりませんでした
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404NotFoundError'
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule_date:
                  type: string
                  format: date
                  example: '2020-12-31'
                  description: 入力する日付
                start_time:
                  type: string
                  format: time
                  example: '17:00:00'
                  description: 入力する開始時間
                end_time:
                  type: string
                  format: time
                  example: '18:00:00'
                  description: 入力する終了時間
                place:
                  type: integer
                  description: '0:オフィス/１:在宅/2:外出'
                  example: 0
                  enum:
                    - 0
                    - 1
                    - 2
                title:
                  type: string
                  example: くろのんアップ
                  description: タイトル
                content:
                  type: string
                  example: くろのんをAWSにアップロードする
                  description: 内容
              required:
                - schedule_date
                - start_time
                - end_time
                - place
                - title
            examples:
              example-1:
                value:
                  schedule_date: '2020-12-31'
                  start_time: '17:00:00'
                  end_time: '18:00:00'
                  place: 0
                  title: くろのんアップ
                  content: くろのんをAWSにアップロードする
        description: ''
      description: 予定を修正する。
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: スケジュールID
    get:
      tags: []
      summary: detailSchedule
      operationId: get-schedules-id
      responses:
        '200':
          description: 予定詳細を表示に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
              examples: {}
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '404':
          description: ページがみつかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404NotFoundError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      description: 予定詳細を表示する
  /calendar:
    get:
      summary: showCalendar
      tags: []
      responses:
        '200':
          description: カレンダー表示に成功しました
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  success:
                    type: boolean
                  code:
                    type: integer
                    default: 200
                    description: 成功コード
                  data:
                    type: array
                    description: その日の最初の予定を返す
                    items:
                      $ref: '#/components/schemas/Schedule'
              examples:
                example-1:
                  value:
                    - id: 1
                      title: くろのん作成
                      schedule_date: '2020-12-31'
                      place: 0
                      start_time: '13:00:00'
                      end_time: '14:00:00'
                      content: くろのんのAPIを作る
                      delete_flag: 0
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '404':
          description: サイトが見つかりませんでした
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404NotFoundError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      operationId: get-calendar
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: 表示するための日付
              required:
                - date
            examples:
              example-1:
                value:
                  date: '2020-12-31'
        description: ''
      description: カレンダーを表示する
    parameters: []
  /schedules:
    post:
      tags: []
      summary: createSchedule
      operationId: post-schedules
      responses:
        '201':
          description: 予定登録に成功しました
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
              examples:
                example-1:
                  value:
                    id: 1
                    title: くろのん作成
                    schedule_date: '2020-12-31'
                    place: 0
                    start_time: '13:00:00'
                    end_time: '14:00:00'
                    content: くろのんのAPIを作る
                    delete_flag: 0
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      description: 予定を登録する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: くろのん作成
                  description: タイトル
                date:
                  type: string
                  format: date
                  example: '2020-12-30'
                  description: 日付
                place:
                  type: integer
                  example: 0
                  enum:
                    - 0
                    - 1
                    - 2
                  description: '場所 0:オフィス/1:在宅/2:外出'
                start_time:
                  type: string
                  format: time
                  example: '14:00:00'
                  description: '開始時間 hh:mm形式'
                end_time:
                  type: string
                  format: time
                  example: '15:00:00'
                  description: '終了時間 hh:mm形式'
                content:
                  type: string
                  example: くろのんのAPIを作成する
                  description: 内容
              required:
                - title
                - date
                - place
                - start_time
                - end_time
            examples:
              example-1:
                value:
                  title: くろのん作成
                  date: '2020-12-30'
                  place: 0
                  start_time: '14:00:00'
                  end_time: '15:00:00'
                  content: くろのんのAPIを作成する
  /schedules/search-by-day:
    get:
      summary: showSchedules
      tags: []
      responses:
        '200':
          description: 予定表の表示に成功しました
          content:
            application/json:
              schema:
                type: array
                description: ユーザーの名前と予定を配列で返す
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 名前
                    schedules:
                      type: array
                      items:
                        $ref: '#/components/schemas/Schedule'
              examples:
                example-1:
                  value:
                    - name: 杉杉
                      schedules:
                        - id: 1
                          title: くろのん作成
                          schedule_date: '2020-12-31'
                          place: 0
                          start_time: '13:00:00'
                          end_time: '14:00:00'
                          content: くろのんのAPIを作る
                          delete_flag: 0
                        - id: 2
                          title: くろのん作成
                          schedule_date: '2020-12-31'
                          place: 0
                          start_time: '13:00:00'
                          end_time: '14:00:00'
                          content: くろのんのAPIを作る
                          delete_flag: 0
                    - name: 奥野
                      schedules:
                        - id: 1
                          title: くろのん作成
                          schedule_date: '2020-12-31'
                          place: 0
                          start_time: '13:00:00'
                          end_time: '14:00:00'
                          content: くろのんのAPIを作る
                          delete_flag: 0
                        - id: 2
                          title: くろのん作成
                          schedule_date: '2020-12-31'
                          place: 0
                          start_time: '13:00:00'
                          end_time: '14:00:00'
                          content: くろのんのAPIを作る
                          delete_flag: 0
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequestError'
              examples: {}
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401UnauthorizedError'
              examples: {}
        '500':
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500ServerError'
              examples: {}
      operationId: get-schedules
      requestBody:
        content:
          application/xml:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: 表示する日付
              required:
                - date
      description: ユーザーの予定一覧を表示する
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        example-1:
          name: 杉
          email: sugi@email.com
      properties:
        name:
          type: string
          example: 杉
          description: 名前
        email:
          type: string
          example: sugi@email.com
          description: メールアドレス
      required:
        - name
        - email
    Schedule:
      title: Schedule
      type: object
      x-examples:
        example-1:
          id: 1
          title: くろのん作成
          schedule_date: '2020-12-31'
          place: 0
          start_time: '13:00:00'
          end_time: '14:00:00'
          content: くろのんのAPIを作る
          delete_flag: 0
      description: ''
      properties:
        id:
          type: integer
          example: 1
          description: 予定の識別
        title:
          type: string
          example: くろのん作成
          description: タイトル
        schedule_date:
          type: string
          example: '2020-12-31'
          format: date
          description: 日付 yyyy-MM-dd形式
        place:
          type: integer
          enum:
            - 0
            - 1
            - 2
          description: '場所 0:オフィス/1:在宅/2:外出'
          example: 0
        start_time:
          type: string
          example: '13:00:00'
          format: time
          description: '開始時間hh:mm形式'
        end_time:
          type: string
          example: '14:00:00'
          format: time
          description: '終了時間hh:mm形式'
        content:
          type: string
          example: くろのんのAPIを作る
          description: 内容
      required:
        - id
        - title
        - schedule_date
        - place
        - start_time
        - end_time
    400BadRequestError:
      title: 400BadRequestError
      type: object
      description: ''
      x-examples:
        example-1:
          success: false
          code: 400
          message: リクエストに失敗しました
      properties:
        success:
          type: boolean
          description: falseを返す
        code:
          type: integer
          default: 400
          description: エラーコード
        message:
          type: string
          example: リクエストに失敗しました
          description: 400エラーのレスポンスメッセージ
      required:
        - success
        - code
        - message
    401UnauthorizedError:
      title: 401UnauthorizedError
      type: object
      x-examples:
        example-1:
          success: false
          code: 401
          message: 認証エラーが発生したよ
      properties:
        success:
          type: boolean
          description: 処理に成功したかどうか（今回はfalse）
        code:
          type: integer
          description: エラーコード
          default: 401
        message:
          type: string
          description: 401エラーのレスポンスメッセージ
          example: 認証エラーが発生したよ
      required:
        - code
        - message
    404NotFoundError:
      title: 404NotFoundError
      type: object
      properties:
        success:
          type: boolean
          description: 処理に成功したかどうか（今回はfalse）
        code:
          type: integer
          description: エラーコード
          default: 404
        message:
          type: string
          description: 404エラーのレスポンスメッセージ
          example: ページが見つからなかったよ
      required:
        - message
      x-examples:
        example-1:
          success: false
          code: 404
          message: ページが見つからなかったよ
    500ServerError:
      title: 500ServerError
      type: object
      properties:
        success:
          type: boolean
          description: 処理に成功したかどうか（今回はfalse）
        code:
          type: integer
          description: エラーコード
          default: 500
        message:
          type: string
          example: サーバーエラーが発生したよ
          description: 500エラーのレスポンスメッセージ
      required:
        - message
      x-examples:
        example-1:
          success: false
          code: 500
          message: サーバーエラーが発生したよ
    403ForbiddenError:
      title: 403ForbiddenError
      type: object
      properties:
        success:
          type: boolean
          description: 処理に成功したかどうか（今回はfalse）
        code:
          type: integer
          description: エラーコード
          default: 403
        message:
          type: string
          example: 権限が見つからなかったよ
          description: 403エラーのレスポンスメッセージ
      required:
        - message
      x-examples:
        example-1:
          success: false
          code: 403
          message: 権限が見つからなかったよ
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
security:
  - API Key - 1: []
